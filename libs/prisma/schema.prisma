// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // Multi-schema: make `app` the home for our tables/enums.
  schemas  = ["app"]
}

/**
 * ============================
 * Enums (MVP scope)
 * ============================
 */
enum UserStatus {
  ACTIVE
  INVITED
  SUSPENDED
  DELETED

  @@schema("app")
}

enum TicketStatus {
  NEW
  IN_PROGRESS
  AWAITING_CUSTOMER
  RESOLVED
  CLOSED

  @@schema("app")
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT

  @@schema("app")
}

enum DocumentStatus {
  UPLOADED
  QUARANTINED
  APPROVED
  REJECTED

  @@schema("app")
}

enum ContentStatus {
  DRAFT
  PUBLISHED
  ARCHIVED

  @@schema("app")
}

enum NotificationChannel {
  EMAIL
  SMS
  WHATSAPP
  PUSH

  @@schema("app")
}

enum AuthProvider {
  PASSWORD
  GOOGLE

  @@schema("app")
}

enum TicketEventType {
  CREATED
  UPDATED
  STATUS_CHANGED
  ASSIGNED
  UNASSIGNED
  COMMENTED
  CLOSED
  REOPENED

  @@schema("app")
}

/**
 * ============================
 * RBAC & Auth
 * ============================
 */
model User {

  id              String     @id @default(uuid())
  email           String     @unique
  passwordHash    String? // null for pure SSO
  passwordVersion Int        @default(1)
  fullName        String
  phoneE164       String?
  isEmailVerified Boolean    @default(false)
  status          UserStatus @default(ACTIVE)
  lastLoginAt     DateTime?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  deletedAt       DateTime?

  // Relations
  roles           UserRole[]
  accounts        AuthAccount[]
  refreshTokens   RefreshToken[]
  passwordResets  PasswordReset[]
  emailVerifs     EmailVerification[]
  notifPrefs      UserNotificationPref[]
  teams           TeamMember[]
  ticketsCreated  Ticket[]               @relation("TicketCustomer")
  ticketsAssigned Ticket[]               @relation("TicketAssignee")
  ticketComments  TicketComment[]
  ticketEvents    TicketEvent[]          @relation("TicketEventActor")
  documents       Document[]             @relation("DocumentUploader")
  contentPages    ContentPage[]          @relation("ContentAuthor")
  referralsMade   Referral[]             @relation("Referrer")
  referralOf      Referral?              @relation("Referred")

  @@index([status])
  @@schema("app")
}

model Role {

  id          String   @id @default(uuid())
  code        String   @unique // ADMIN, AGENT, CUSTOMER
  name        String
  description String?
  createdAt   DateTime @default(now())

  userRoles UserRole[]
  perms     RolePermission[]

  @@schema("app")
}

model Permission {

  id          String  @id @default(uuid())
  code        String  @unique // e.g., ticket:assign
  description String?

  rolePerms RolePermission[]

  @@schema("app")
}

model UserRole {

  userId    String
  roleId    String
  grantedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@schema("app")
}

model RolePermission {

  roleId       String
  permissionId String

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
  @@schema("app")
}

model AuthAccount {

  id                String       @id @default(uuid())
  userId            String
  provider          AuthProvider
  providerAccountId String
  providerEmail     String?
  createdAt         DateTime     @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@unique([userId, provider])
  @@schema("app")
}

model RefreshToken {

  id        String    @id @default(uuid())
  userId    String
  tokenHash String    @unique
  userAgent String?
  ipAddr    String?
  issuedAt  DateTime  @default(now())
  expiresAt DateTime
  revokedAt DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@schema("app")
}

model PasswordReset {

  id        String    @id @default(uuid())
  userId    String
  tokenHash String    @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("app")
}

model EmailVerification {

  id        String    @id @default(uuid())
  userId    String
  tokenHash String    @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("app")
}

model UserNotificationPref {

  id      String              @id @default(uuid())
  userId  String
  channel NotificationChannel
  enabled Boolean             @default(true)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, channel])
  @@schema("app")
}

/**
 * ============================
 * Teams & Assignment
 * ============================
 */
model Team {

  id        String   @id @default(uuid())
  code      String   @unique
  name      String
  createdAt DateTime @default(now())

  members TeamMember[]
  tickets Ticket[]

  @@schema("app")
}

model TeamMember {

  teamId   String
  userId   String
  isLead   Boolean  @default(false)
  joinedAt DateTime @default(now())

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([teamId, userId])
  @@schema("app")
}

/**
 * ============================
 * Ticketing
 * ============================
 */
model TicketCategory {

  id        String   @id @default(uuid())
  parentId  String?
  slug      String   @unique
  name      String
  active    Boolean  @default(true)
  sortOrder Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parent   TicketCategory?  @relation("TicketCategoryToSelf", fields: [parentId], references: [id])
  children TicketCategory[] @relation("TicketCategoryToSelf")
  tickets  Ticket[]

  @@schema("app")
}

model Ticket {

  id           String         @id @default(uuid())
  customerId   String
  assigneeId   String?
  teamId       String?
  categoryId   String?
  title        String
  description  String?
  status       TicketStatus   @default(NEW)
  priority     TicketPriority @default(MEDIUM)
  dueAt        DateTime?
  closedAt     DateTime?
  customFields Json           @default("{}")
  // searchVector tsvector (generated): add via SQL in migration (see ยง3)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  deletedAt    DateTime?

  customer  User            @relation("TicketCustomer", fields: [customerId], references: [id], onDelete: Restrict)
  assignee  User?           @relation("TicketAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  team      Team?           @relation(fields: [teamId], references: [id], onDelete: SetNull)
  category  TicketCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  comments  TicketComment[]
  events    TicketEvent[]
  documents Document[]

  @@index([customerId])
  @@index([assigneeId, status])
  @@index([categoryId, status])
  @@index([status, updatedAt])
  @@schema("app")
}

model TicketComment {

  id         String   @id @default(uuid())
  ticketId   String
  authorId   String
  body       String
  isInternal Boolean  @default(false)
  createdAt  DateTime @default(now())

  ticket Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  author User   @relation(fields: [authorId], references: [id], onDelete: Restrict)

  @@index([ticketId, createdAt(sort: Desc)])
  @@schema("app")
}

model TicketEvent {

  id        String          @id @default(uuid())
  ticketId  String
  actorId   String?
  eventType TicketEventType
  payload   Json            @default("{}")
  createdAt DateTime        @default(now())

  ticket Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  actor  User?  @relation("TicketEventActor", fields: [actorId], references: [id], onDelete: SetNull)

  @@index([ticketId, createdAt(sort: Desc)])
  @@schema("app")
}

/**
 * ============================
 * Documents (GCS metadata)
 * ============================
 */
model Document {

  id             String         @id @default(uuid())
  ticketId       String
  uploadedBy     String
  bucket         String
  objectKey      String         @unique
  filename       String
  contentType    String
  sizeBytes      BigInt
  checksumSha256 String?
  status         DocumentStatus @default(UPLOADED)
  metadata       Json           @default("{}")
  virusScan      Json?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  deletedAt      DateTime?

  ticket   Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  uploader User   @relation("DocumentUploader", fields: [uploadedBy], references: [id], onDelete: Restrict)

  @@index([ticketId])
  @@index([uploadedBy])
  @@index([status])
  @@schema("app")
}

/**
 * ============================
 * Content Hub
 * ============================
 */
model ContentCategory {

  id        String   @id @default(uuid())
  slug      String   @unique
  name      String
  createdAt DateTime @default(now())

  pages ContentPage[]

  @@schema("app")
}

model ContentPage {

  id          String        @id @default(uuid())
  categoryId  String?
  slug        String        @unique
  title       String
  bodyMd      String
  status      ContentStatus @default(DRAFT)
  publishedAt DateTime?
  authorId    String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  category ContentCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  author   User?            @relation("ContentAuthor", fields: [authorId], references: [id], onDelete: SetNull)

  @@index([status, publishedAt(sort: Desc)])
  @@schema("app")
}

/**
 * ============================
 * Referrals (minimal)
 * ============================
 */
model Referral {

  id             String   @id @default(uuid())
  referrerUserId String
  referredUserId String?  @unique
  code           String
  createdAt      DateTime @default(now())

  referrer User  @relation("Referrer", fields: [referrerUserId], references: [id], onDelete: Cascade)
  referred User? @relation("Referred", fields: [referredUserId], references: [id], onDelete: SetNull)

  @@index([referrerUserId])
  @@schema("app")
}
